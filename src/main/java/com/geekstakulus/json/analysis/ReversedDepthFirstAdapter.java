/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.geekstakulus.json.analysis;

import java.util.*;
import com.geekstakulus.json.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPJson().apply(this);
        outStart(node);
    }

    public void inAJson(AJson node)
    {
        defaultIn(node);
    }

    public void outAJson(AJson node)
    {
        defaultOut(node);
    }

    public void caseAJson(AJson node)
    {
        inAJson(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAJson(node);
    }
    public void inAObjectValue(AObjectValue node)
    {
        defaultIn(node);
    }

    public void outAObjectValue(AObjectValue node)
    {
        defaultOut(node);
    }

    public void caseAObjectValue(AObjectValue node)
    {
        inAObjectValue(node);
        {
            Object temp[] = node.getMember().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PMember) temp[i]).apply(this);
            }
        }
        outAObjectValue(node);
    }
    public void inAArrayValue(AArrayValue node)
    {
        defaultIn(node);
    }

    public void outAArrayValue(AArrayValue node)
    {
        defaultOut(node);
    }

    public void caseAArrayValue(AArrayValue node)
    {
        inAArrayValue(node);
        {
            Object temp[] = node.getElement().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PElement) temp[i]).apply(this);
            }
        }
        outAArrayValue(node);
    }
    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }
    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }
    public void inATrueValue(ATrueValue node)
    {
        defaultIn(node);
    }

    public void outATrueValue(ATrueValue node)
    {
        defaultOut(node);
    }

    public void caseATrueValue(ATrueValue node)
    {
        inATrueValue(node);
        outATrueValue(node);
    }
    public void inAFalseValue(AFalseValue node)
    {
        defaultIn(node);
    }

    public void outAFalseValue(AFalseValue node)
    {
        defaultOut(node);
    }

    public void caseAFalseValue(AFalseValue node)
    {
        inAFalseValue(node);
        outAFalseValue(node);
    }
    public void inANullValue(ANullValue node)
    {
        defaultIn(node);
    }

    public void outANullValue(ANullValue node)
    {
        defaultOut(node);
    }

    public void caseANullValue(ANullValue node)
    {
        inANullValue(node);
        outANullValue(node);
    }
    public void inAPairMember(APairMember node)
    {
        defaultIn(node);
    }

    public void outAPairMember(APairMember node)
    {
        defaultOut(node);
    }

    public void caseAPairMember(APairMember node)
    {
        inAPairMember(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAPairMember(node);
    }
    public void inAEmptyMember(AEmptyMember node)
    {
        defaultIn(node);
    }

    public void outAEmptyMember(AEmptyMember node)
    {
        defaultOut(node);
    }

    public void caseAEmptyMember(AEmptyMember node)
    {
        inAEmptyMember(node);
        outAEmptyMember(node);
    }
    public void inAValueElement(AValueElement node)
    {
        defaultIn(node);
    }

    public void outAValueElement(AValueElement node)
    {
        defaultOut(node);
    }

    public void caseAValueElement(AValueElement node)
    {
        inAValueElement(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueElement(node);
    }
    public void inAEmptyElement(AEmptyElement node)
    {
        defaultIn(node);
    }

    public void outAEmptyElement(AEmptyElement node)
    {
        defaultOut(node);
    }

    public void caseAEmptyElement(AEmptyElement node)
    {
        inAEmptyElement(node);
        outAEmptyElement(node);
    }
}
