/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.geekstakulus.json.lexer;

import java.io.*;
import java.util.*;
import com.geekstakulus.json.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new2(int line, int pos) { return new TComma(line, pos); }
    Token new3(int line, int pos) { return new TLCurlyBracket(line, pos); }
    Token new4(int line, int pos) { return new TRCurlyBracket(line, pos); }
    Token new5(int line, int pos) { return new TLBracket(line, pos); }
    Token new6(int line, int pos) { return new TRBracket(line, pos); }
    Token new7(int line, int pos) { return new TTrue(line, pos); }
    Token new8(int line, int pos) { return new TFalse(line, pos); }
    Token new9(int line, int pos) { return new TNull(line, pos); }
    Token new10(int line, int pos) { return new TColon(line, pos); }
    Token new11(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }


    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable; /* = {
      {
        {
          {9, 9, 1},
          {10, 10, 2},
          {12, 12, 3},
          {13, 13, 4},
          {32, 32, 5},
          {34, 34, 6},
          {44, 44, 7},
          {45, 45, 8},
          {48, 57, 9},
          {58, 58, 10},
          {91, 91, 11},
          {93, 93, 12},
          {102, 102, 13},
          {110, 110, 14},
          {116, 116, 15},
          {123, 123, 16},
          {125, 125, 17},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 9, 1},
          {10, 10, 18},
          {12, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {32, 33, 19},
          {34, 34, 20},
          {35, 91, 19},
          {92, 92, 21},
          {93, 65535, 19},
        },
        {
        },
        {
          {48, 57, 9},
        },
        {
          {46, 46, 22},
          {48, 57, 9},
          {69, 69, 23},
          {101, 101, 24},
        },
        {
        },
        {
        },
        {
        },
        {
          {97, 97, 25},
        },
        {
          {117, 117, 26},
        },
        {
          {114, 114, 27},
        },
        {
        },
        {
        },
        {
          {9, 32, -2},
        },
        {
          {32, 65535, -8},
        },
        {
        },
        {
          {34, 34, 28},
          {47, 47, 29},
          {92, 92, 30},
          {98, 98, 31},
          {102, 102, 32},
          {110, 110, 33},
          {114, 114, 34},
          {116, 116, 35},
          {117, 117, 36},
        },
        {
          {48, 57, 37},
        },
        {
          {43, 43, 38},
          {45, 45, 39},
          {48, 57, 40},
        },
        {
          {43, 57, -25},
        },
        {
          {108, 108, 41},
        },
        {
          {108, 108, 42},
        },
        {
          {117, 117, 43},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
        {
          {48, 57, 44},
          {65, 90, 45},
          {97, 122, 45},
        },
        {
          {48, 57, 37},
          {69, 101, -11},
        },
        {
          {48, 57, 40},
        },
        {
          {48, 57, 40},
        },
        {
          {48, 57, 40},
        },
        {
          {115, 115, 46},
        },
        {
          {108, 108, 47},
        },
        {
          {101, 101, 48},
        },
        {
          {48, 57, 49},
          {65, 90, 50},
          {97, 122, 50},
        },
        {
          {48, 122, -46},
        },
        {
          {101, 101, 51},
        },
        {
        },
        {
        },
        {
          {48, 57, 52},
          {65, 90, 53},
          {97, 122, 53},
        },
        {
          {48, 122, -51},
        },
        {
        },
        {
          {48, 57, 54},
          {65, 90, 55},
          {97, 122, 55},
        },
        {
          {48, 122, -54},
        },
        {
          {32, 65535, -8},
        },
        {
          {32, 65535, -8},
        },
      },
    };
    */

    private static int[][] accept; /* = {
      {
  11, 11, 11, 11, 11, 11, -1, 2, -1, 0, 10, 5, 6, -1, -1, -1, 3, 4, 11, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, 9, 7, -1, -1, 8, -1, -1, -1, -1, 

      },
    };
    */

    static
    {
        try
        {
            BufferedReader r = new BufferedReader (new InputStreamReader (
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = Integer.parseInt(r.readLine());
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = Integer.parseInt(r.readLine());
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = Integer.parseInt(r.readLine());
                        }
                    }
                }
            }

            // read accept
            length = Integer.parseInt(r.readLine());
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = Integer.parseInt(r.readLine());
                }
            }

            r.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
