Package com.geekstakulus.json;

Helpers

unicode_input_character = [0..0xffff];
ht  = 0x0009;
lf  = 0x000a;
ff  = 0x000c;
cr  = 0x000d;
sp  = ' ';

line_terminator = lf | cr | cr lf;
digit = ['0'..'9'];
any = [unicode_input_character - [cr + lf]];
int = '-'? digit+;
frac = '.' digit+;
e = ('e'|'E') ('+'|'-')?;
exp = e digit+;
letter = [['a' .. 'z'] + ['A' .. 'Z']];
hexdig = digit | letter;
esc = '\' | '"' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' hexdig hexdig hexdig hexdig;

Tokens

number = int frac? exp?;
string = '"' ([any - [['\' + '"'] + [0x0000..0x001f]]] | '\' esc)* '"';
comma = ',';
l_curly_bracket = '{' ;
r_curly_bracket = '}' ;
l_bracket = '[';
r_bracket = ']';
true = 'true';
false = 'false';
null = 'null';
colon = ':';
white_space = (sp | ht | ff | line_terminator)*;

Ignored Tokens

white_space;

Productions

json {-> json} =
  value {-> New json(value) };

value {-> value } =
	{object} l_curly_bracket members r_curly_bracket {-> New value.object([members.member])} |
	{array} l_bracket elements r_bracket {-> New value.array([elements.element])} |
	{number} number {-> New value.number(number)} |
	{string} string {-> New value.string(string)} |
	{true} true {-> New value.true()} |
	{false} false {-> New value.false()} |
	{null} null {-> New value.null()} ;

members {-> member*} =
  {single} member {-> [member]} |
  {sequence} members comma member {-> [members.member, member]} ;

member {-> member} =
  {pair} string colon value {-> New member.pair(string, value)} |
  {empty} {-> New member.empty()} ;

elements {-> element*} =
  {single} element {-> [element]} |
  {sequence} elements comma element {->[elements.element, element]} ;

element {-> element} =
  {value} value {-> New element.value(value)} |
  {empty} {-> New element.empty()} ;

Abstract Syntax Tree

json =
  value ;

value =
	{object} member* |
	{array} element* |
	{number} number |
	{string} string |
	{true} |
	{false} |
	{null} ;

member =
  {pair} string value |
  {empty} ;

element =
  {value} value |
  {empty} ;
